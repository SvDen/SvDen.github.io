"use strict";function ToDoList(t){function e(){var t=void 0;try{t=JSON.parse(h.getItem("todo-list"))}catch(e){t=void 0,console.log("Error in localStorage file: "+e.message)}b=t||{},o();for(var n in b)l(n,b[n].task,b[n].important,b[n].completed)}function o(){h.setItem("todo-list",JSON.stringify(b)),0==Object.keys(b).length?E.classList.add("hidden"):E.classList.remove("hidden")}function n(t){var e=t.closest("li"),n=e.getAttribute("data-id");e.remove(),delete b[n],o()}function i(t){function e(n){n.target!=s&&(t.textContent=s.value,b[a].task=t.textContent,document.removeEventListener("click",e),s.remove(),k=!1,t.classList.remove("hidden"),o())}function n(n){var i=n.which;if(13==i)t.textContent=s.value,b[a].task=t.textContent;else if(27!=i)return;document.removeEventListener("click",e),s.remove(),k=!1,t.classList.remove("hidden"),o()}if(!k){k=!0,t.classList.add("hidden");var i=t.closest("li"),a=i.getAttribute("data-id"),s=document.createElement("div");s.innerHTML='<input type="text" class="todo-list-edit form-control">',s=s.firstChild,s.value=t.textContent,i.appendChild(s),s.focus(),event.stopImmediatePropagation(),document.addEventListener("click",e),document.addEventListener("keydown",n)}}function a(t){var e=t.closest("li"),n=e.getAttribute("data-id");t.classList.toggle("label-danger"),t.classList.toggle("label-default"),b[n].important=!b[n].important,o()}function s(t){var e=t.closest("li"),n=e.getAttribute("data-id");e.classList.toggle("completed"),b[n].completed=!b[n].completed,o()}function d(t,e,n){var i=Math.random(),a={task:t,important:e,completed:n};b[i]=a,l(i,t,e,n),L.focus(),o()}function l(t,e,o,n){var i=document.createElement("li");i.classList.add("list-group-item","todo-item"),i.setAttribute("data-id",t);var a=void 0;a=o===!0?"label-danger":"label-default";var s='<label class="complete-container">\n                            <input type="checkbox" class="complete">\n                            <span class="todo-item-icon"></span>\n                        </label>\n                        <span class="todo-item-label label '+a+'">!</span>\n                        <span class="todo-item-text">'+e+'</span>\n                        <span class="todo-item-close text-danger pull-right">&#10006;</span>';n&&i.classList.add("completed"),i.innerHTML=s,p.appendChild(i)}function c(){var t=p.getElementsByTagName("li");Array.from(t).forEach(function(t){return t.remove()})}function r(t,e,n){"down"==n?e.parentElement.insertBefore(t,e.nextSibling):e.parentElement.insertBefore(t,e),x.y=B.y;var i=e.getAttribute("data-id"),a=t.getAttribute("data-id"),s=void 0;s=b[i],b[i]=b[a],b[a]=s,t.setAttribute("data-id",i),e.setAttribute("data-id",a),o()}function m(t){B={y:t.pageY},Math.abs(x.y-B.y)<10||(A.classList.add("todo-element-dragging"),document.body.classList.add("todo-dragging"),t.target.closest("li")&&(t.target.closest("li")!==w&&(w=t.target.closest("li"),C=w.getBoundingClientRect().top+window.pageYOffset+w.offsetHeight/2),A!=w&&(x.y<B.y&&B.y>C?r(A,w,"down"):x.y>B.y&&B.y<C&&r(A,w,"up"))))}function u(){document.removeEventListener("mousemove",m),document.removeEventListener("mouseup",u),A.classList.remove("todo-element-dragging"),document.body.classList.remove("todo-dragging")}var v=t.id,g=document.getElementById(v),p=document.getElementById("todo-list-group"),f=(g.getElementsByTagName("form")[0],document.getElementById("todo-submit")),L=document.getElementById("todo-input"),y=document.getElementById("todo-important"),E=document.getElementById("todo-filters"),b=void 0,h=localStorage,k=!1;e(),p.addEventListener("click",function(t){var e=t.target;e.classList.contains("todo-item-close")&&n(e),e.classList.contains("todo-item-label")&&a(e),e.classList.contains("todo-item-icon")&&s(e.parentElement.getElementsByTagName("input")[0])}),p.addEventListener("dblclick",function(t){var e=t.target;e.classList.contains("todo-item-text")&&i(e)}),f.addEventListener("click",function(t){var e=L.value;return""==e?!1:(d(e,y.checked,!1),L.value="",y.checked=!1,void t.preventDefault())}),E.addEventListener("click",function(t){var e=t.target;if(e.classList.contains("label")){var o=E.getElementsByTagName("span");if(Array.from(o).forEach(function(t){return t.classList.remove("active")}),e.classList.add("active"),c(),e.classList.contains("todo-all"))for(var n in b)l(n,b[n].task,b[n].important,b[n].completed);else if(e.classList.contains("todo-active"))for(var n in b)b[n].completed||l(n,b[n].task,b[n].important,b[n].completed);else if(e.classList.contains("todo-completed"))for(var n in b)b[n].completed&&l(n,b[n].task,b[n].important,b[n].completed);else if(e.classList.contains("todo-important"))for(var n in b)b[n].important&&l(n,b[n].task,b[n].important,b[n].completed);else;}});var B=void 0,x=void 0,A=void 0,w=void 0,C=void 0;p.addEventListener("mousedown",function(t){w=A=t.target.closest("li"),"LI"!==A.closest("li").tagName||1!==t.which||A.closest("ul").getElementsByClassName("todo-list-edit")[0]||(x={y:t.pageY},document.addEventListener("mousemove",m),document.addEventListener("mouseup",u))}),g.addEventListener("mousedown",function(t){t.target.closest("input")||t.preventDefault()})}var list=new ToDoList({id:"todo-list"});
//# sourceMappingURL=data:application/json;base64,
